Git Commands to Know
(inspired by reflections notes of Denyos on Udacity forums)

Commands:
git init | inside a directory, it starts a local repository
git config --global color.ui auto |    get colored diff output

git log  |    List the commits and show which files have changed
enter | shows more commits in the log
q |    exit git log!
git log --stat  |    Show additional information about the commits
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation
  of the commit history within different branches

git status | tells branch, what's staged, and what's untracked

git diff id1 id2  |    Compare two commits, with id1 the "base"
git diff --staged | compares stage to most recent commit

git show commitId  |    Show the changes made in this commit compared to
  the previous version. This is working even after merging.

git checkout  |    Shows a previous version of the file.
git checkout master | see what's at the tip of the master branch
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on
  this branch in one call instead of git branch new_branch_name and
  git checkout new_branch_name

git add <filename1> | puts 1st file in staging area, as prep to commit
git add <filename2> | puts 2nd file on staging area, to commit with filename1

git rm --cached <filename> | removes it from staging area

git commit | creates trackable commit with whatever versions of files were staged
  above opens your default text editor, which u must save and close to complete
git commit -m "<commit message>" | to commit with tiny message

[notes on commit message standards:
  1st line = type:subject, where type comes from:
    feat = feature
    fix = bugfix
    docs = delta in the docs
    style = formatting changes only
    refactor = production code change but no intended function change
    test = no intended production change, just delta in test(s)
    chore = maintenance tasks
  Note that subject is in command tense: Remove blue (not removing/removed)

git reset --hard | *ANNIHILATES* working directory version and staging area

git clone  |    Create a local copy/clone from an accessible repository

git branch moneymaker | create a branch called moneymaker
git branch -d name  |    Remove the branch with the specified name

git merge master moneymaker | brings new stuff from master into moneymaker
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
 reference documentation here  https://git-scm.com/docs/git-merge
 it appears if my current branch is master and I say "get merge altBranch" it will
 bring the altBranch code into the current master branch

git remote -v | says if there's a remote repo tied to this dir
git remote add origin https://github.com/jendatx/ud775.git | connects local dir to remote dir

git push origin master | syncs my master to the repo I refer to as origin

git pull origin master | syncs the master from remote repo down to my local repo

[after you fork a repository on GitHub, you can clone to local machine]
git clone https://github.com/jendatx/recipes.git

Note the workflow when making changes in a separate branch with a wider team:
  - You need to stay up-to-date with changes others are making in master
  - Rather than simply pulling and pushing your own code, you must:
    * pull others' changes into your local master branch, 
    * merge the local master into your branch
    * push your branch to the remote,
    * finally merge your branch into master via pull request
#BestPractices: when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.
